class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:
    def __init__(self):
        self.head = None

    def append(self, data):
        """Add a node at the end of the list"""
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            return
        
        current = self.head
        while current.next:
            current = current.next
        current.next = new_node

    def print_list(self):
        """Print the entire linked list"""
        if self.head is None:
            print("List is empty.")
            return

        current = self.head
        while current:
            print(current.data, end=" -> ")
            current = current.next
        print("None")

    def delete_nth_node(self, n):
        """Delete the nth node (1-based index)"""
        if self.head is None:
            raise Exception("Cannot delete from an empty list.")

        if n <= 0:
            raise IndexError("Index should be a positive integer (1-based index).")

        if n == 1:
            self.head = self.head.next
            return

        current = self.head
        prev = None
        count = 1

        while current and count < n:
            prev = current
            current = current.next
            count += 1

        if current is None:
            raise IndexError(f"Index {n} is out of range.")

        prev.next = current.next


# --- Test the implementation ---
if __name__ == "__main__":
    ll = LinkedList()

    # Append elements
    ll.append(10)
    ll.append(20)
    ll.append(30)
    ll.append(40)
    print("Original List:")
    ll.print_list()

    # Delete 3rd node (value 30)
    print("\nAfter deleting 3rd node:")
    try:
        ll.delete_nth_node(3)
        ll.print_list()
    except Exception as e:
        print(f"Error: {e}")

    # Attempt to delete out-of-range index
    print("\nAttempt to delete 10th node (out of range):")
    try:
        ll.delete_nth_node(10)
    except Exception as e:
        print(f"Error: {e}")

    # Attempt to delete from empty list
    print("\nClear list and attempt deletion:")
    ll = LinkedList()  # new empty list
    try:
        ll.delete_nth_node(1)
    except Exception as e:
        print(f"Error: {e}")
